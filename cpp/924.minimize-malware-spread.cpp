/*
 * @lc app=leetcode id=924 lang=cpp
 *
 * [924] Minimize Malware Spread
 */
#include <vector>
#include <climits>
using namespace std;
// @lc code=start
// t:O(n^2), s:O(n)
class Solution
{
    int get_groups(vector<int> &groups, int idx)
    {
        if (groups[idx] == idx)
        {
            return idx;
        }
        return groups[idx] = get_groups(groups, groups[idx]);
    }

public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int w = graph.size();
        vector<int> groups(w);
        for (int i = 0; i != w; ++i)
        {
            groups[i] = i;
        }
        for (int i = 0; i != w; ++i)
        {
            for (int j = i + 1; j != w; ++j)
            {
                if (graph[i][j])
                {
                    int ig = get_groups(groups, i);
                    int jg = get_groups(groups, j);
                    groups[ig] = jg;
                }
            }
        }
        vector<int> member_num(w), init_member_num(w);
        for (int i = 0; i != w; ++i)
        {
            member_num[get_groups(groups, i)]++;
        }
        for (auto init : initial)
        {
            init_member_num[get_groups(groups, init)]++;
        }
        int res = INT_MAX;
        int res_gp = -1;
        for (auto init : initial)
        {
            int init_gp = groups[get_groups(groups, init)];
            if (init_member_num[init_gp] > 1)
            {
                continue;
            }
            if (res_gp == -1)
            {
                res = init;
                res_gp = init_gp;
            }
            if (member_num[res_gp] < member_num[init_gp])
            {
                res = init;
                res_gp = init_gp;
            }
            else if (member_num[res_gp] == member_num[init_gp])
            {
                res = min(res, init);
            }
        }
        return res == INT_MAX ? *min_element(initial.begin(), initial.end()) : res;
    }
};
// @lc code=end
